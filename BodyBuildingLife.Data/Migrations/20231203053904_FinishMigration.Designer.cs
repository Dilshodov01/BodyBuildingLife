// <auto-generated />
using System;
using BodyBuildingLife.Data.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BodyBuildingLife.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231203053904_FinishMigration")]
    partial class FinishMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BodyBuildingLife.Domain.Entities.Assets.PersonAsset", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateAtt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAtt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonAssets");
                });

            modelBuilder.Entity("BodyBuildingLife.Domain.Entities.Assets.TrainerAsset", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateAtt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<long>("TrainerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAtt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TrainerId");

                    b.ToTable("PersonTrainersAsset");
                });

            modelBuilder.Entity("BodyBuildingLife.Domain.Entities.Cards.Card", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("CardIsBloced")
                        .HasColumnType("bit");

                    b.Property<string>("CardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAtt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Money")
                        .HasColumnType("bigint");

                    b.Property<string>("PasportSeriaNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAtt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ValidityPeriod")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("BodyBuildingLife.Domain.Entities.PersonTreainers.PersonTrainer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateAtt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TrainerId")
                        .HasColumnType("bigint");

                    b.Property<long>("TraionerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdateAtt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("TrainerId");

                    b.ToTable("PersonTrainers");
                });

            modelBuilder.Entity("BodyBuildingLife.Domain.Entities.Persons.Person", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateAtt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasportSeriaNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SportsCardId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TrainerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdateAtt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TrainerId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("BodyBuildingLife.Domain.Entities.ProtainPersons.PersonProtein", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateAtt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProteinId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdateAtt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("ProteinId");

                    b.ToTable("PersonProteins");
                });

            modelBuilder.Entity("BodyBuildingLife.Domain.Entities.Protains.Protein", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAtt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProteinStandardsId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdateAtt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ValidityPeriod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("volume")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Proteins");
                });

            modelBuilder.Entity("BodyBuildingLife.Domain.Entities.Standards.ProteinStandards", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ConsumptionTimes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConsumptionVolume")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAtt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long?>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProteinId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdateAtt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("ProteinId");

                    b.ToTable("ProteinStandards");
                });

            modelBuilder.Entity("BodyBuildingLife.Domain.Entities.Trainers.Trainer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateAtt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SportsSpecialist")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAtt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Trainers");
                });

            modelBuilder.Entity("BodyBuildingLife.Domain.Entities.Assets.PersonAsset", b =>
                {
                    b.HasOne("BodyBuildingLife.Domain.Entities.Persons.Person", "Person")
                        .WithMany("PersonAssets")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("BodyBuildingLife.Domain.Entities.Assets.TrainerAsset", b =>
                {
                    b.HasOne("BodyBuildingLife.Domain.Entities.Trainers.Trainer", "Trainer")
                        .WithMany("TrainerAssets")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("BodyBuildingLife.Domain.Entities.Cards.Card", b =>
                {
                    b.HasOne("BodyBuildingLife.Domain.Entities.Persons.Person", null)
                        .WithMany("Cards")
                        .HasForeignKey("PersonId");
                });

            modelBuilder.Entity("BodyBuildingLife.Domain.Entities.PersonTreainers.PersonTrainer", b =>
                {
                    b.HasOne("BodyBuildingLife.Domain.Entities.Persons.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BodyBuildingLife.Domain.Entities.Trainers.Trainer", "Trainer")
                        .WithMany()
                        .HasForeignKey("TrainerId");

                    b.Navigation("Person");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("BodyBuildingLife.Domain.Entities.Persons.Person", b =>
                {
                    b.HasOne("BodyBuildingLife.Domain.Entities.Trainers.Trainer", null)
                        .WithMany("Persons")
                        .HasForeignKey("TrainerId");
                });

            modelBuilder.Entity("BodyBuildingLife.Domain.Entities.ProtainPersons.PersonProtein", b =>
                {
                    b.HasOne("BodyBuildingLife.Domain.Entities.Persons.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BodyBuildingLife.Domain.Entities.Protains.Protein", "Protein")
                        .WithMany()
                        .HasForeignKey("ProteinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Protein");
                });

            modelBuilder.Entity("BodyBuildingLife.Domain.Entities.Protains.Protein", b =>
                {
                    b.HasOne("BodyBuildingLife.Domain.Entities.Persons.Person", null)
                        .WithMany("Proteins")
                        .HasForeignKey("PersonId");
                });

            modelBuilder.Entity("BodyBuildingLife.Domain.Entities.Standards.ProteinStandards", b =>
                {
                    b.HasOne("BodyBuildingLife.Domain.Entities.Persons.Person", null)
                        .WithMany("ProteinStandards")
                        .HasForeignKey("PersonId");

                    b.HasOne("BodyBuildingLife.Domain.Entities.Protains.Protein", null)
                        .WithMany("ProteinStandards")
                        .HasForeignKey("ProteinId");
                });

            modelBuilder.Entity("BodyBuildingLife.Domain.Entities.Persons.Person", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("PersonAssets");

                    b.Navigation("ProteinStandards");

                    b.Navigation("Proteins");
                });

            modelBuilder.Entity("BodyBuildingLife.Domain.Entities.Protains.Protein", b =>
                {
                    b.Navigation("ProteinStandards");
                });

            modelBuilder.Entity("BodyBuildingLife.Domain.Entities.Trainers.Trainer", b =>
                {
                    b.Navigation("Persons");

                    b.Navigation("TrainerAssets");
                });
#pragma warning restore 612, 618
        }
    }
}
